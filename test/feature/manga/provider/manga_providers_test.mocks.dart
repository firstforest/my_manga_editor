// Mocks generated by Mockito 5.4.6 from annotations
// in my_manga_editor/test/feature/manga/provider/manga_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_quill/quill_delta.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:my_manga_editor/feature/manga/model/manga.dart' as _i4;
import 'package:my_manga_editor/feature/manga/model/sync_status.dart' as _i8;
import 'package:my_manga_editor/feature/manga/repository/manga_repository.dart'
    as _i2;

import 'manga_providers_test.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MangaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMangaRepository extends _i1.Mock implements _i2.MangaRepository {
  @override
  _i3.Future<_i4.MangaId> createNewManga({String? name = '無名の傑作'}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewManga,
          [],
          {#name: name},
        ),
        returnValue: _i5.mockCreateNewManga(name: name),
        returnValueForMissingStub: _i5.mockCreateNewManga(name: name),
      ) as _i3.Future<_i4.MangaId>);

  @override
  _i3.Stream<_i4.Manga?> getMangaStream(_i4.MangaId? id) => (super.noSuchMethod(
        Invocation.method(
          #getMangaStream,
          [id],
        ),
        returnValue: _i3.Stream<_i4.Manga?>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.Manga?>.empty(),
      ) as _i3.Stream<_i4.Manga?>);

  @override
  _i3.Stream<List<_i4.Manga>> watchAllMangaList() => (super.noSuchMethod(
        Invocation.method(
          #watchAllMangaList,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Manga>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<_i4.Manga>>.empty(),
      ) as _i3.Stream<List<_i4.Manga>>);

  @override
  _i3.Future<void> updateMangaName(
    _i4.MangaId? id,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMangaName,
          [
            id,
            name,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateStartPage(
    _i4.MangaId? id,
    _i4.MangaStartPage? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStartPage,
          [
            id,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteManga(_i4.MangaId? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteManga,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveDelta(
    _i4.DeltaId? firestoreDeltaId,
    _i6.Delta? delta,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveDelta,
          [
            firestoreDeltaId,
            delta,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i6.Delta?> loadDelta(_i4.DeltaId? firestoreDeltaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadDelta,
          [firestoreDeltaId],
        ),
        returnValue: _i3.Future<_i6.Delta?>.value(),
        returnValueForMissingStub: _i3.Future<_i6.Delta?>.value(),
      ) as _i3.Future<_i6.Delta?>);

  @override
  _i3.Stream<_i6.Delta?> getDeltaStream(String? firestoreDeltaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeltaStream,
          [firestoreDeltaId],
        ),
        returnValue: _i3.Stream<_i6.Delta?>.empty(),
        returnValueForMissingStub: _i3.Stream<_i6.Delta?>.empty(),
      ) as _i3.Stream<_i6.Delta?>);

  @override
  _i3.Future<String> createNewMangaPage(_i4.MangaId? mangaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewMangaPage,
          [mangaId],
        ),
        returnValue: _i3.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #createNewMangaPage,
            [mangaId],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #createNewMangaPage,
            [mangaId],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Stream<_i4.MangaPage?> getMangaPageStream(_i4.MangaPageId? pageId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMangaPageStream,
          [pageId],
        ),
        returnValue: _i3.Stream<_i4.MangaPage?>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.MangaPage?>.empty(),
      ) as _i3.Stream<_i4.MangaPage?>);

  @override
  _i3.Stream<_i4.MangaPage?> getMangaPageStreamWithMangaId(
    _i4.MangaId? mangaId,
    _i4.MangaPageId? pageId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMangaPageStreamWithMangaId,
          [
            mangaId,
            pageId,
          ],
        ),
        returnValue: _i3.Stream<_i4.MangaPage?>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.MangaPage?>.empty(),
      ) as _i3.Stream<_i4.MangaPage?>);

  @override
  _i3.Stream<List<_i4.MangaPageId>> watchAllMangaPageIdList(
          _i4.MangaId? mangaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAllMangaPageIdList,
          [mangaId],
        ),
        returnValue: _i3.Stream<List<_i4.MangaPageId>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<_i4.MangaPageId>>.empty(),
      ) as _i3.Stream<List<_i4.MangaPageId>>);

  @override
  _i3.Future<void> reorderPages(
    _i4.MangaId? mangaId,
    List<_i4.MangaPageId>? pageIdList,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reorderPages,
          [
            mangaId,
            pageIdList,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMangaPage(_i4.MangaPageId? pageId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMangaPage,
          [pageId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<_i8.SyncStatus> watchSyncStatus() => (super.noSuchMethod(
        Invocation.method(
          #watchSyncStatus,
          [],
        ),
        returnValue: _i3.Stream<_i8.SyncStatus>.empty(),
        returnValueForMissingStub: _i3.Stream<_i8.SyncStatus>.empty(),
      ) as _i3.Stream<_i8.SyncStatus>);

  @override
  _i3.Future<void> forceSyncAll() => (super.noSuchMethod(
        Invocation.method(
          #forceSyncAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String> toMarkdown(_i4.MangaId? mangaId) => (super.noSuchMethod(
        Invocation.method(
          #toMarkdown,
          [mangaId],
        ),
        returnValue: _i3.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #toMarkdown,
            [mangaId],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #toMarkdown,
            [mangaId],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
