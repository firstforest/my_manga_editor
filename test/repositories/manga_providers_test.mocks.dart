// Mocks generated by Mockito 5.4.6 from annotations
// in my_manga_editor/test/repositories/manga_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_quill/quill_delta.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_manga_editor/models/manga.dart' as _i3;
import 'package:my_manga_editor/repositories/manga_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MangaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMangaRepository extends _i1.Mock implements _i2.MangaRepository {
  @override
  Map<int, _i3.MangaPage> get pages => (super.noSuchMethod(
        Invocation.getter(#pages),
        returnValue: <int, _i3.MangaPage>{},
        returnValueForMissingStub: <int, _i3.MangaPage>{},
      ) as Map<int, _i3.MangaPage>);

  @override
  _i4.Future<void> saveManga(
    String? fileName,
    _i3.Manga? manga,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveManga,
          [
            fileName,
            manga,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> createNewManga() => (super.noSuchMethod(
        Invocation.method(
          #createNewManga,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<_i3.Manga?> loadManga(String? fileName) => (super.noSuchMethod(
        Invocation.method(
          #loadManga,
          [fileName],
        ),
        returnValue: _i4.Future<_i3.Manga?>.value(),
        returnValueForMissingStub: _i4.Future<_i3.Manga?>.value(),
      ) as _i4.Future<_i3.Manga?>);

  @override
  _i4.Stream<_i3.Manga?> watchManga(int? id) => (super.noSuchMethod(
        Invocation.method(
          #watchManga,
          [id],
        ),
        returnValue: _i4.Stream<_i3.Manga?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i3.Manga?>.empty(),
      ) as _i4.Stream<_i3.Manga?>);

  @override
  _i4.Future<void> clearData() => (super.noSuchMethod(
        Invocation.method(
          #clearData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i3.MangaPage?> getMangaPageStream(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMangaPageStream,
          [id],
        ),
        returnValue: _i4.Stream<_i3.MangaPage?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i3.MangaPage?>.empty(),
      ) as _i4.Stream<_i3.MangaPage?>);

  @override
  _i4.Stream<_i3.Manga?> getMangaStream(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMangaStream,
          [id],
        ),
        returnValue: _i4.Stream<_i3.Manga?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i3.Manga?>.empty(),
      ) as _i4.Stream<_i3.Manga?>);

  @override
  _i4.Stream<List<_i3.Manga>> watchAllMangaList() => (super.noSuchMethod(
        Invocation.method(
          #watchAllMangaList,
          [],
        ),
        returnValue: _i4.Stream<List<_i3.Manga>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i3.Manga>>.empty(),
      ) as _i4.Stream<List<_i3.Manga>>);

  @override
  _i4.Stream<_i5.Delta?> getDeltaStream(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getDeltaStream,
          [id],
        ),
        returnValue: _i4.Stream<_i5.Delta?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.Delta?>.empty(),
      ) as _i4.Stream<_i5.Delta?>);

  @override
  void saveDelta(
    int? id,
    _i5.Delta? delta,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #saveDelta,
          [
            id,
            delta,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> createNewMangaPage(int? mangaId) => (super.noSuchMethod(
        Invocation.method(
          #createNewMangaPage,
          [mangaId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<int>> watchAllMangaPageIdList(int? mangaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAllMangaPageIdList,
          [mangaId],
        ),
        returnValue: _i4.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<int>>.empty(),
      ) as _i4.Stream<List<int>>);

  @override
  _i4.Future<void> reorderPages(
    int? id,
    List<int>? pageIdList,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reorderPages,
          [
            id,
            pageIdList,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateMangaName(
    int? id,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMangaName,
          [
            id,
            name,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMangaPage(int? pageId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMangaPage,
          [pageId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteManga(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteManga,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateStartPage(
    int? id,
    _i3.MangaStartPage? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateStartPage,
          [
            id,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
